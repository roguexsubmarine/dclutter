#!/bin/bash  
# Bash script  

LOG_FILE="$HOME/.dclutter.log"

log(){
    local FILE=$1
    local TYPE=$2
    local NUM=$3
    local LOG_FILE=$4

    mkdir -p "$TYPE"
    mv "$FILE" "$TYPE"

    echo -e "$NUM\t$TYPE\t:$FILE"
    
    #create LOG if not
    touch "$LOG_FILE"
    echo -e "$NUM\t$FILE\t$(pwd)\t$(pwd)/$TYPE" >> "$LOG_FILE"

}


undo_op(){
    local LOG_FILE=$1

    local NUM=$(tail -n 1 "$LOG_FILE" | awk '{print $1}')
    echo -e "Reverting last $NUM operations."
    
    for ((i = NUM; i > 0; i--));
    do
        LAST=$(tail -n 1 "$LOG_FILE")
        
        #check if empty string
        if [[ -z "$LAST" ]];
        then
            echo "done."
            break
        else
            FILE=$(echo "$LAST" | awk '{print $2}')
            OLD_PATH=$(echo "$LAST" | awk '{print $3}')
            CURR_PATH=$(echo "$LAST" | awk '{print $4}')


            if [[ -e "$CURR_PATH/$FILE" && -e "$OLD_PATH/$FILE" ]];
            then
                echo "Conflict detected: $FILE exists in both $CURR_PATH and $OLD_PATH. Skipping."
                sed -i '$d' "$LOG_FILE"
                continue
            fi

            if [[ -e "$CURR_PATH/$FILE" ]];
            then
                mv $CURR_PATH/$FILE $OLD_PATH/
                echo -e "recovering $FILE from $CURR_PATH"
            fi
            #deleting last line from log
            sed -i '$d' "$LOG_FILE"
        fi
    done
    
}

#function to display usage
usage(){
    echo -e "\nUsage: $0 [-i] [-c] [-r days] [-h] [-x] [-w] [-d]\n"
    echo -e "\tOption -i \t:(segregate images)"
    echo -e "\tOption -c \t:(clear empty directories)"
    echo -e "\tOption -r [days]:(recent (age) filter)"
    echo -e "\tOption -h \t:(display help)"
    echo -e "\tOption -u \t:(undo last operation)"
    echo -e "\tOption -x \t:(clear log)"
    echo -e "\tOption -w \t:(remove whitespace from file names)"
    echo -e "\tOption -d \t:(directory dump - recursive dump of all files present in this directory)"
}

remove_whitespace(){
    echo -e "Replacing Whitespace."
    echo $(pwd)

    for FILE in $(pwd)/*;
    do
        if [[ -e "$FILE" ]];
        then
            
            #new name with underscore
            NEW_FILE="${FILE// /_}"
            if [[ "$FILE" != "$NEW_FILE" ]];
            then
                mv "$FILE" "$NEW_FILE"
                echo -e "Renamed: $FILE"
            fi
        fi
    done
}


image_sep(){
    echo "Dcluttering images."
    echo $(pwd)

    #create LOG_FILE if not
    local LOG_FILE=$1
    local line_num=1

    for FILE in $(pwd)/*;
    do
        
        local file=$(basename "$FILE")

        if [ -f "$file" ];
        then
           
            #check if image
            if file -b "$file" | grep -q 'image\|Image';
            then
                
                #JPEG (joint photogenic experts group)
                #also include .xcf files (used by gimp)
                if file -b "$file" | grep -q 'JPEG';
                then
                    log "$file" "JPEG" "$line_num" "$LOG_FILE"
                    ((line_num++))

                #PNG (Portable Network Graphics)
                elif file -b "$file" | grep -q 'PNG';
                then
                    log "$file" "PNG" "$line_num" "$LOG_FILE"
                    ((line_num++))

                #SVG (Scalable Vector Graphics)
                elif file -b "$file" | grep -q 'SVG';
                then
                    log "$file" "SVG" "$line_num"  "$LOG_FILE"
                    ((line_num++))
                
                #.ai
                elif file -b "$file" | grep -q 'Adobe Photoshop';
                then
                    log "$file" "Adobe" "$line_num"  "$LOG_FILE"
                    ((line_num++))
                
                #TIFF (Tagged Image File Format)
                elif file -b "$file" | grep -q 'TIFF';
                then
                    log "$file" "TIFF" "$line_num"  "$LOG_FILE"

                    ((line_num++))
                
                #HEIF (High Efficiency Image File)
                elif file -b "$file" | grep -q 'HEIF';
                then
                    log "$file" "HEIF" "$line_num"  "$LOG_FILE"
                    ((line_num++))

                elif file -b "$file" | grep -q 'Web/P';
                then
                    log "$file" "WEBP" "$line_num"  "$LOG_FILE"
                    ((line_num++))
                
                #GIF (Graphics Interchange Format)
                elif file -b "$file" | grep -q 'GIF';
                then
                    log "$file" "GIF" "$line_num" "$LOG_FILE"
                    ((line_num++))

                elif file -b "$file" | grep -q 'Netpbm';
                then
                    log "$file" "PPM" "$line_num" "$LOG_FILE"
                    ((line_num++))

                fi


            elif file -b "$file" | grep -q 'PostScript';
            then
                log "$file" "EPS" "$line_num" "$LOG_FILE"
                ((line_num++))
            
            elif file -b "$file" | grep -q 'bitmap';
            then
                log "$file" "BITMAP" "$line_num" "$LOG_FILE"
                ((line_num++))
            fi

        fi

    done
}


remove_empty(){
    echo "Removing empty directories"
    echo $(pwd)

    local NUM=1

    for file in $(pwd)/*;
    do
        if [ -d "$file" ];
        then
            if [ $(ls -A "$file" | wc -l)  -eq 0 ];
            then
                echo -e "$NUM\tRemoving\t:$file"
                rmdir "$file"
                ((NUM++))
            fi
        fi
    done
}


dclutter_main(){
    echo "D-cluttering current working directory..."
    echo $(pwd)
    

    #create LOG_FILE if not
    local LOG_FILE=$1
    touch "$LOG_FILE"

    local line_num=1

    for FILE in "$(pwd)"/*;
    do

        local file=$(basename "$FILE")
    
        if [ -f "$file" ];
        then

        
            #RECENT
            #check if file is modified within a day
            if [ "$(find "$file" -type f -mtime -1 2>/dev/null)" ];
            then
                mkdir -p recent
                cp "$file" recent
                echo -e "recent\t:$file" 
            fi

            #CATEGORIZING

            #check for images
            if file -b "$file" | grep -q 'image\|Image\|PostScript\|bitmap';
            then
                log "$file" "images" "$line_num" "$LOG_FILE"
                ((line_num++))
          
            #check for documents
            elif file -b "$file" | grep -q 'document';
            then
                log "$file" "documents" "$line_num" "$LOG_FILE"
                ((line_num++))
        
            #check for compression
            elif file -b "$file" | grep -q 'compress';
            then
                log "$file" "compressed" "$line_num" "$LOG_FILE"
                ((line_num++))

            #check for ASCII/text/code
            elif file -b "$file" | grep -q 'ASCII\|text\|JSON';
            then
                log "$file" "codext" "$line_num" "$LOG_FILE"
                ((line_num++))
                 mkdir -p codext
     
            #check for binaries or src code
            elif file -b "$file" | grep -q 'bin\|src';
            then
                log "$file" "src_bin" "$line_num" "$LOG_FILE"
                ((line_num++))
           
            #check for audio
            elif file -b "$file" | grep -q 'Audio';
            then
                log "$file" "audio" "$line_num" "$LOG_FILE"
                ((line_num++))

            #check for videos (no choice fo this one... check extensions)
            elif [[ "$file" == *.mp4 || "$file" == *.mkv || "$file" == *.webm ]];
            then
                log "$file" "video" "$line_num" "$LOG_FILE"
                ((line_num++))

            #check for fonts
            elif file -b "$file" | grep -q "Font";
            then
                log "$file" "font" "$line_num" "$LOG_FILE"
                ((line_num++))
 
            #check for iso images
            elif file -b "$file" | grep -q 'bootable';
            then
                log "$file" "bootables" "$line_num" "$LOG_FILE"
                ((line_num++))

            #check for microsoft files
            elif file -b "$file" | grep -q 'Microsoft';
            then
                log "$file" "microsoft" "$line_num" "$LOG_FILE"
                ((line_num++))

            fi
        fi
    done
}

clean_log(){
    local LOG=$1

    if [[ -e "$LOG" ]];
    then
        rm "$LOG"
        touch "$LOG"
        echo "Clean log :)"
    fi
}

recent_sort() {
    local LOG_FILE=$1
    local AGE=1

    if [ $# -eq 2 ];
    then
        AGE=$2
    fi
    
    echo "Sorting : $(pwd)"

    local line_num=1
    for FILE in "$(pwd)"/*; do

        local file=$(basename "$FILE")
        if [[ -f "$FILE" ]];
        then
            # Check if file is modified within the last specified number of days
            if [ "$(find "$file" -type f -mtime -$AGE 2>/dev/null)" ];
            then
                log "$file" "under_$AGE" "$line_num"  "$LOG_FILE"
                ((line_num++))
            else
                log "$file" "older_$AGE" "$line_num"  "$LOG_FILE"
                ((line_num++))
            fi
        fi
    done
    echo "Age filtered."
}





# if no options provided
if [ $# -eq 0 ];
then
    remove_whitespace
    dclutter_main "$LOG_FILE"
else

    #check for options
    if [ "$1" == '-c' ];
    then
        remove_empty
        exit 0
    elif [ "$1" == '-i' ];
    then
        remove_whitespace
        image_sep "$LOG_FILE"
        exit 0
    elif [ "$1" == '-w' ];
    then
        remove_whitespace
        exit 0
    elif [ "$1" == '-u' ];
    then
        undo_op "$LOG_FILE"
        exit 0
    elif [ "$1" == '-x' ];
    then
        clean_log "$LOG_FILE"
        exit 0
    elif [ "$1" == '-r' ];
    then
        remove_whitespace
        if [ $# -gt 1 ];
        then
            recent_sort "$LOG_FILE" "$2"
        else
            recent_sort "$LOG_FILE"
        fi
        exit 0
    else
        usage
        exit 0
    fi

fi
